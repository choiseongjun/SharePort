{"ast":null,"code":"import { all, fork, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user';\n/*\r\n  @Date 2019-08-02\r\n  @author 최성준\r\n  @brief 유저관련 리듀서사가\r\n*/\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n  // return axios.post('/user/login', loginData, {\n  //   withCredentials: true,\n  // });\n}\n\n;\n\nfunction* login() {\n  //실제 axios호출시 action 넣기\n  try {\n    //const result = yield call(logInAPI, action.data);\n    // yield call(loginAPI);\n    yield delay(1000);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS //data: result.data,\n\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login); //로그인이라는 액션이 들어오는지 기다림\n}\n\nfunction signUpAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/login');\n}\n\nfunction* signUp() {\n  try {\n    // yield call(signUpAPI);\n    yield delay(2000);\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* helloSaga() {\n  console.log(\"saga Test by Seong Jun\");\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp), helloSaga()]);\n}","map":{"version":3,"sources":["C:\\Users\\ucssystem\\git\\studyMate\\src\\main\\resources\\static\\refer-client\\sagas\\user.js"],"names":["all","fork","takeEvery","call","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","loginAPI","login","type","e","console","error","watchLogin","signUpAPI","axios","post","signUp","watchSignUp","helloSaga","log","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,IAA1C,EAAgDC,KAAhD,QAA6D,oBAA7D;AAEA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,QAAkH,kBAAlH;AACA;;;;;;AAKA,SAASC,QAAT,GAAmB,CACjB;AACA;AACA;AACA;AACD;;AAAA;;AAED,UAAUC,KAAV,GAAkB;AAAE;AAChB,MAAI;AACF;AACA;AACA,UAAMR,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AAAE;AACVW,MAAAA,IAAI,EAAEP,cADE,CAER;;AAFQ,KAAD,CAAT;AAID,GARD,CAQE,OAAOQ,CAAP,EAAU;AAAE;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMZ,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAEN;AADE,KAAD,CAAT;AAGD;AACF;;AAEH,UAAUU,UAAV,GAAuB;AACnB,QAAMjB,SAAS,CAACK,cAAD,EAAiBO,KAAjB,CAAf,CADmB,CACoB;AACxC;;AACD,SAASM,SAAT,GAAqB;AACnB;AACA,SAAOC,KAAK,CAACC,IAAN,CAAW,QAAX,CAAP;AACD;;AAED,UAAUC,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMjB,KAAK,CAAC,IAAD,CAAX;AAEA,UAAMF,GAAG,CAAC;AAAE;AACVW,MAAAA,IAAI,EAAEH;AADE,KAAD,CAAT;AAGD,GAPD,CAOE,OAAOI,CAAP,EAAU;AAAE;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMZ,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAEJ,eADE;AAERO,MAAAA,KAAK,EAAEF;AAFC,KAAD,CAAT;AAID;AACF;;AAEH,UAAUQ,WAAV,GAAwB;AACxB,QAAMtB,SAAS,CAACQ,eAAD,EAAkBa,MAAlB,CAAf;AACC;;AACD,UAAUE,SAAV,GAAqB;AACjBR,EAAAA,OAAO,CAACS,GAAR,CAAY,wBAAZ;AACH;;AACD,eAAe,UAAUC,QAAV,GAAqB;AAChC,QAAM3B,GAAG,CAAC,CACRC,IAAI,CAACkB,UAAD,CADI,EAERlB,IAAI,CAACuB,WAAD,CAFI,EAGRC,SAAS,EAHD,CAAD,CAAT;AAKD","sourcesContent":["import { all, fork, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\n\r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user';\r\n/*\r\n  @Date 2019-08-02\r\n  @author 최성준\r\n  @brief 유저관련 리듀서사가\r\n*/\r\nfunction loginAPI(){\r\n  // 서버에 요청을 보내는 부분\r\n  // return axios.post('/user/login', loginData, {\r\n  //   withCredentials: true,\r\n  // });\r\n};\r\n\r\nfunction* login() { //실제 axios호출시 action 넣기\r\n    try {\r\n      //const result = yield call(logInAPI, action.data);\r\n      // yield call(loginAPI);\r\n      yield delay(1000);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOG_IN_SUCCESS,\r\n        //data: result.data,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: LOG_IN_FAILURE,\r\n      });\r\n    }\r\n  }\r\n\r\nfunction* watchLogin() {\r\n    yield takeEvery(LOG_IN_REQUEST, login);//로그인이라는 액션이 들어오는지 기다림\r\n  }\r\n  function signUpAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/login');\r\n  }\r\n  \r\n  function* signUp() {\r\n    try {\r\n      // yield call(signUpAPI);\r\n      yield delay(2000);\r\n     \r\n      yield put({ // put은 dispatch 동일\r\n        type: SIGN_UP_SUCCESS,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: SIGN_UP_FAILURE,\r\n        error: e\r\n      });\r\n    }\r\n  }\r\n  \r\nfunction* watchSignUp() {\r\nyield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\nfunction* helloSaga(){\r\n    console.log(\"saga Test by Seong Jun\");\r\n}\r\nexport default function* userSaga() {\r\n    yield all([\r\n      fork(watchLogin),\r\n      fork(watchSignUp),\r\n      helloSaga(),\r\n    ]);\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}